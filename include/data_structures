#ifndef COURSEWORK_DATASTRUCTURES
#define COURSEWORK_DATASTRUCTURES

#include <algorithm>
#include <functional>
#include <cmath>
#include <iterator>
#include <tuple>
#include <list>
#include <utility>
#include <queue>


#include "aiwlib/sphere"
#include "aiwlib/vec"
#include "aiwlib/matr"


namespace Data {
    // Интерфейс поля скоростей
    class IVField {
    public:
        virtual double operator()(const aiw::Vec<3> &r) const = 0;
        [[nodiscard]] virtual aiw::Vec<3> grad(const aiw::Vec<3> &r) const = 0;
        virtual ~IVField() = default;
    };
    // Класс луча
    struct Ray {
        Ray() = default;
        Ray(const aiw::Vec<3> &r, const aiw::Vec<3> &p, int num) : st_r(r), st_p(p), r(r), p(p), num(num) {}
        aiw::Vec<3> st_r{};
        aiw::Vec<3> st_p{};
        aiw::Vec<3> r{};
        aiw::Vec<3> p{};
        int num = -1;
    };
    // Класс трехлучевой трубки
    class Tube {
    public:
        Tube() = default;
        void init(std::reference_wrapper<Ray> init_ray_one, std::reference_wrapper<Ray> init_ray_two, std::reference_wrapper<Ray> init_ray_three, int num_tube) {
            rays.emplace_back(init_ray_one); rays.emplace_back(init_ray_two); rays.emplace_back(init_ray_three); num = num_tube;
        }
        void set_neighbor(std::reference_wrapper<Tube> neighbor_tube) {
            neighbor_tubes.push_back(neighbor_tube);
        }
        void reset_ray(std::reference_wrapper<Ray> new_ray, std::reference_wrapper<Ray> old_ray) {
            for (auto &ray : rays) { if (ray.get().num == old_ray.get().num) { ray = new_ray; }
            }
        }
        void reset_neighbor(std::reference_wrapper<Tube> new_tube, std::reference_wrapper<Tube> old_tube) {
            for (auto &tube : neighbor_tubes) { if (tube.get().num == old_tube.get().num) { tube = new_tube; } }
        }
    public:
        std::vector<std::reference_wrapper<Ray>> rays;
        std::vector<std::reference_wrapper<Tube>> neighbor_tubes;
        int color = 0;
        int num = -1;
    };
    // Класс ребра между двумя лучами
    class Edge {
    public:
        Edge() = default;
        void init(std::vector<std::reference_wrapper<Ray>> &rays_edge, std::vector<std::reference_wrapper<Tube>> &tubes_edge) {
            rays = rays_edge; tubes = tubes_edge;
        }
        [[nodiscard]] double len() const { return (rays[0].get().r - rays[1].get().r).abs(); }
    public:
        std::vector<std::reference_wrapper<Ray>> rays;
        std::vector<std::reference_wrapper<Tube>> tubes;
    };
    // Инициализация лучей и трубок
    void init_rays(int rank, double v_0, double cone_rad, std::list<Ray> &rays, std::list<Tube> &tubes) {
        aiw::Vec<3> r_center(0., 0., 0.);
        aiw::sph_init_table(rank);
        size_t n_rays = aiw::sph_vertex_num(rank);
        Ray **rays_table = new Ray *[n_rays];
        std::fill_n(rays_table, n_rays, nullptr);
        // Инициализируем таблицу существующих лучей
        for (size_t id = 0; id < n_rays; ++id) {
            auto r = aiw::sph_vert(id, rank);
            if (r[2] >= std::cos(cone_rad)) {
                if (rays_table[id] == nullptr) {
                    rays_table[id] = new Ray(r_center, r / v_0, id);
                    for (auto id_n : aiw::sph_vert_vert(id, rank)) {
                        if (rays_table[id_n] == nullptr) {
                            r = aiw::sph_vert(id_n, rank);
                            rays_table[id_n] = new Ray(r_center, r / v_0, id_n);
                        }
                    }
                }
            }
        }
        // Собираем из таблицы список лучей
        std::map<uint64_t, std::reference_wrapper<Ray>> id_ray2num_ray;
        for (size_t id = 0; id < n_rays; ++id) {
            if (rays_table[id] != nullptr) {
                rays.emplace_back(*rays_table[id]);
                id_ray2num_ray.try_emplace(id, rays.back());
            }
        }
        // Инициализируем список существующих трубок
        size_t n_tubes = aiw::sph_cells_num(rank);
        std::map<uint64_t, std::reference_wrapper<Tube>> id_tube2num_tube;
        for (size_t id = 0; id < n_tubes; ++id) {
            aiw::Vec<3, uint64_t> idxs_ray_cur_tube = aiw::sph_cell_vert(id, rank);
            std::vector<std::map<uint64_t, std::reference_wrapper<Ray>>::iterator> iter_ray_cur_tube;
            for (uint64_t idx : idxs_ray_cur_tube) {
                auto iterator = id_ray2num_ray.find(idx);
                if (iterator != id_ray2num_ray.end()) {
                    iter_ray_cur_tube.emplace_back(iterator);
                }
            }
            if (iter_ray_cur_tube.size() == 3) {
                tubes.emplace_back();
                tubes.back().init(iter_ray_cur_tube[0]->second, iter_ray_cur_tube[1]->second, iter_ray_cur_tube[2]->second, id);
                id_tube2num_tube.try_emplace(id, tubes.back());
            }
        }
        // Связываем трубки
        for (size_t id = 0; id < n_tubes; ++id) {
            auto iter_tube = id_tube2num_tube.find(id);
            if (iter_tube != id_tube2num_tube.end()) {
                aiw::Vec<3, uint64_t> idx_adjacent_tubes = aiw::sph_cell_cell(id, rank);
                auto iter_neighbor_tube = id_tube2num_tube.find(idx_adjacent_tubes[0]);
                if (iter_neighbor_tube != id_tube2num_tube.end()) {
                    iter_tube->second.get().set_neighbor(iter_neighbor_tube->second);
                }
                iter_neighbor_tube = id_tube2num_tube.find(idx_adjacent_tubes[1]);
                if (iter_neighbor_tube != id_tube2num_tube.end()) {
                    iter_tube->second.get().set_neighbor(iter_neighbor_tube->second);
                }
                iter_neighbor_tube = id_tube2num_tube.find(idx_adjacent_tubes[2]);
                if (iter_neighbor_tube != id_tube2num_tube.end()) {
                    iter_tube->second.get().set_neighbor(iter_neighbor_tube->second);
                }
            }
        }
        // Очищаем таблицу лучей
        for (size_t id = 0; id < n_rays; ++id) {
            if (rays_table[id] != nullptr) {
                delete rays_table[id];
            }
        }
        delete[] rays_table;
        //aiw::sph_free_table(rank);
    }
    // Проверяет, является ли трубка соседней для данного ребра
    bool check_neighbor_tube(std::vector<std::reference_wrapper<Ray>> &rays, std::reference_wrapper<Tube> tube_neighbor) {
        bool r1 = false, r2 = false;
        for (auto ray : tube_neighbor.get().rays) {
            if (ray.get().num == rays[0].get().num) { r1 = true; }
            if (ray.get().num == rays[1].get().num) { r2 = true; }
        }
        return r1 && r2;
    }
    // Получение ребер из трубок
    std::list<Edge> get_edge(std::list<Tube> &tubes) {
        std::list<Edge> edges;
        std::queue<std::reference_wrapper<Tube>> queue;
        for (auto &tube: tubes) {
            tube.color = 0;
        }
        queue.push(std::ref(tubes.front()));
        tubes.back().color = 1;
        while (!queue.empty()) {
            std::reference_wrapper<Tube> cur_node = queue.front();
            queue.pop();
            cur_node.get().color = 2;
            for (int num_ray = 0; num_ray < 3; ++num_ray) {
                std::vector<std::reference_wrapper<Ray>> common_rays{cur_node.get().rays[num_ray % 3], cur_node.get().rays[(num_ray + 1) % 3]};
                std::vector<std::reference_wrapper<Tube>> common_tubes{cur_node};
                bool create_edge = true;
                for (auto &neighbor_node : cur_node.get().neighbor_tubes) {
                    if (check_neighbor_tube(common_rays, neighbor_node)) {
                        if (neighbor_node.get().color != 2) { common_tubes.emplace_back(neighbor_node); } else { create_edge = false; }
                        break;
                    }
                }
                if (create_edge) {
                    edges.emplace_back();
                    edges.back().init(common_rays, common_tubes);
                }
            }
            for (auto &neighbor_node : cur_node.get().neighbor_tubes) {
                if (neighbor_node.get().color == 0) {
                    neighbor_node.get().color = 1;
                    queue.push(neighbor_node);
                }
            }
        }
        return edges;
    }
    inline std::reference_wrapper<Ray> get_common_ray(std::vector<std::reference_wrapper<Ray>> &edge, std::reference_wrapper<Tube> &tube) {
        for (auto &ray : tube.get().rays) { if (ray.get().num != edge[0].get().num && ray.get().num != edge[1].get().num) { return ray; } }
    }
    // Разбиение трубок и пересвязывание
    void splitting_bandaging_tubes(Data::Edge &edge, Data::Ray &new_ray, std::list<Ray> &rays, std::list<Tube> &tubes) {
        rays.emplace_back(new_ray);
        if (edge.tubes.size() == 1) {
            auto common_ray = get_common_ray(edge.rays, edge.tubes[0]);
            std::vector<std::vector<std::reference_wrapper<Ray>>> edges(2);
            for (int idx = 0; idx < 2; ++idx) {
                edges[idx].emplace_back(common_ray);
                edges[idx].emplace_back(edge.rays[idx % 2]);
            }
            std::map<uint64_t, std::reference_wrapper<Tube>> id_tube2tube;
            for (auto &tube : edge.tubes[0].get().neighbor_tubes) {
                if (check_neighbor_tube(edges[0], tube)) { id_tube2tube.try_emplace(0, tube);
                } else if (check_neighbor_tube(edges[1], tube)) { id_tube2tube.try_emplace(1, tube); }
            }
            int num_tube = tubes.back().num;
            tubes.emplace_back();
            tubes.back().init(rays.back(), edges[1][0], edges[1][1], num_tube + 1);
            edge.tubes[0].get().reset_ray(rays.back(), edges[1][1]);
            tubes.back().set_neighbor(edge.tubes[0]);
            auto iter_neighbor2 = id_tube2tube.find(1);
            if (iter_neighbor2 != id_tube2tube.end()) {
                tubes.back().set_neighbor(iter_neighbor2->second);
                edge.tubes[0].get().reset_neighbor(tubes.back(), iter_neighbor2->second);
                iter_neighbor2->second.get().reset_neighbor(tubes.back(), edge.tubes[0]);
            } else {
                edge.tubes[0].get().set_neighbor(tubes.back());
            }
        } else if (edge.tubes.size() == 2) {
            std::vector<std::reference_wrapper<Ray>> common_rays {get_common_ray(edge.rays, edge.tubes[0]), get_common_ray(edge.rays, edge.tubes[1]) };
            std::vector<std::vector<std::reference_wrapper<Ray>>> edges(4);
            for (int idx = 0; idx < 4; ++idx) {
                edges[idx].emplace_back(common_rays[idx / 2]);
                edges[idx].emplace_back(edge.rays[idx % 2]);
            }
            std::map<uint64_t, std::reference_wrapper<Tube>> id_tube2tube;
            for (int idx = 0; idx < 2; ++idx) {
                for (auto &tube : edge.tubes[0].get().neighbor_tubes) {
                    if (check_neighbor_tube(edges[0], tube)) { id_tube2tube.try_emplace(0, tube);
                    } else if (check_neighbor_tube(edges[1], tube)) { id_tube2tube.try_emplace(1, tube); }
                }
            }
            for (int idx = 0; idx < 2; ++idx) {
                for (auto &tube : edge.tubes[1].get().neighbor_tubes) {
                    if (check_neighbor_tube(edges[2], tube)) { id_tube2tube.try_emplace(2, tube);
                    } else if (check_neighbor_tube(edges[3], tube)) { id_tube2tube.try_emplace(3, tube); }
                }
            }
            int num_tube = tubes.back().num;
            for (int idx = 1; idx < 4; idx += 2) {
                tubes.emplace_back();
                tubes.back().init(rays.back(), edges[idx][0], edges[idx][1], num_tube + idx);
                edge.tubes[idx / 2].get().reset_ray(rays.back(), edges[idx][1]);
                tubes.back().set_neighbor(edge.tubes[idx / 2]);
                auto iter_neighbor2 = id_tube2tube.find(idx);
                if (iter_neighbor2 != id_tube2tube.end()) {
                    tubes.back().set_neighbor(iter_neighbor2->second);
                    edge.tubes[idx / 2].get().reset_neighbor(tubes.back(), iter_neighbor2->second);
                    iter_neighbor2->second.get().reset_neighbor(tubes.back(), edge.tubes[idx / 2]);
                } else {
                    edge.tubes[idx / 2].get().set_neighbor(tubes.back());
                }
            }
            auto iter_pred_end = tubes.end();
            --iter_pred_end; --iter_pred_end;
            std::reference_wrapper<Tube> ref = std::ref(*iter_pred_end);
            iter_pred_end->set_neighbor(tubes.back());
            tubes.back().set_neighbor(ref);
        }
    }
}

#endif
